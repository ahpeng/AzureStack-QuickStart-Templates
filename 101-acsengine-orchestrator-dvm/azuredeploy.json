{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      },
      "defaultValue": "azureuser"
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "[concat('Subscription#',substring(resourcegroup().id,15,36))]",
      "metadata": {
        "description": "Password for the Virtual Machine.Default value is 'Subscription#<subscription id>'"
      }
    },
    "buildAcsEngine": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "If true we will build latest acs-engine and then use the binary from build. If false we will use a pre-build acs-engine binary from the repo."
      }
    },
    "apiModelBlobPath": {
      "type": "string",
      "metadata": {
        "description": "Path to JSON api model stored in a storage account (e.g. https://k8ssa492210.blob.local.azurestack.external/k8ssaci492210/azurestack.json)."
      }
    },
    "existingStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage account Name for an existing storage account. This is account that holds the input API model. We will upload the resulting template files to this same storage account."
      }
    },
    "existingStorageAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Storage account resource group name. We will upload the resulting template files to this resource group."
      }
    },
    "tenantId": {
      "type": "string",
      "metadata": {
        "description": "Tenant Id for the tenat that has the resource group that was used to upload the API model."
      }
    },
    "tenantSubscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Tenant subcription Id for the subscription that has the resource group that was used to upload the API model."
      }
    },
    "tenantUsername": {
      "type": "string",
      "metadata": {
        "description": "Tenant Username."
      }
    },
    "tenantPassword": {
      "type": "string",
      "metadata": {
        "description": "Tenant Password."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      },
      "defaultValue": "https://raw.githubusercontent.com/radhikagupta5/azurestack-quickstart-templates/radhikgu-acs/101-acsengine-orchestrator-dvm/"
    }
  },
  "variables": {
    "dnsNameForPublicIP": "[concat('dns', resourceGroup().name)]",
    "location": "[resourceGroup().location]",
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "imageSku": "16.04-LTS",
    "vmSize":  "Standard_D2_v2",
    "OSDiskName": "osdisk",
    "nicName": "myVnic",
    "addressPrefix": "10.0.0.0/24",
    "subnetName": "mySubnet",
    "subnetPrefix": "10.0.0.0/24",
    "storageAccountName": "[concat('sa', parameters('existingStorageAccountName'))]",
    "storageAccountType": "Standard_LRS",
    "publicIPAddressName": "myPublicIP",
    "publicIPAddressType": "Dynamic",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[concat('vm', resourceGroup().name)]",
    "virtualNetworkName": "myVnet",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "networkSecurityGroupName": "[tolower(concat('nsg',uniquestring(resourceGroup().id)))]",
    "scriptName": "script",
    "scriptParameters": "[concat(parameters('buildAcsEngine'), ' ', parameters('apiModelBlobPath'), ' ', parameters('tenantId'), ' ', parameters('tenantSubscriptionId'), ' ', parameters('tenantUsername'), ' ', parameters('tenantPassword'), ' ', parameters('existingStorageAccountName'), ' ', parameters('existingStorageAccountResourceGroup'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[toLower(variables('storageAccountName'))]",
      "apiVersion": "2015-06-15",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow RDP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[variables('networkSecurityGroupName')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
      "publisher": "Microsoft.Azure.Extensions",
      "type": "CustomScript",
      "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": "true",
        "settings": {
          "fileUris": [ "[concat(parameters('_artifactsLocation'), variables('scriptName'), '.sh')]" ],
          "commandToExecute": "[concat('/bin/bash -c \"/bin/bash ', variables('scriptName'), '.sh ' , variables('scriptParameters'), ' >> /var/log/azure/acsengine-orchestrator-dvm.log 2>&1\"')]"
        }
      }
    }
  ],

  "outputs": {
  }
}